// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: baton/splitter/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SplitterPacketData struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *SplitterPacketData) Reset()         { *m = SplitterPacketData{} }
func (m *SplitterPacketData) String() string { return proto.CompactTextString(m) }
func (*SplitterPacketData) ProtoMessage()    {}
func (*SplitterPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e62aae9241d7efc, []int{0}
}
func (m *SplitterPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitterPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitterPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitterPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitterPacketData.Merge(m, src)
}
func (m *SplitterPacketData) XXX_Size() int {
	return m.Size()
}
func (m *SplitterPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitterPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_SplitterPacketData proto.InternalMessageInfo

func (m *SplitterPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SplitterPacketData) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type MultiPacket struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Packet  []byte `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
}

func (m *MultiPacket) Reset()         { *m = MultiPacket{} }
func (m *MultiPacket) String() string { return proto.CompactTextString(m) }
func (*MultiPacket) ProtoMessage()    {}
func (*MultiPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e62aae9241d7efc, []int{1}
}
func (m *MultiPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiPacket.Merge(m, src)
}
func (m *MultiPacket) XXX_Size() int {
	return m.Size()
}
func (m *MultiPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MultiPacket proto.InternalMessageInfo

func (m *MultiPacket) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MultiPacket) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

type SplitterPacketTracker struct {
	Port       string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	Channel    string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Amount     uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PacketHash []byte `protobuf:"bytes,4,opt,name=packet_hash,json=packetHash,proto3" json:"packet_hash,omitempty"`
}

func (m *SplitterPacketTracker) Reset()         { *m = SplitterPacketTracker{} }
func (m *SplitterPacketTracker) String() string { return proto.CompactTextString(m) }
func (*SplitterPacketTracker) ProtoMessage()    {}
func (*SplitterPacketTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e62aae9241d7efc, []int{2}
}
func (m *SplitterPacketTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitterPacketTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitterPacketTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitterPacketTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitterPacketTracker.Merge(m, src)
}
func (m *SplitterPacketTracker) XXX_Size() int {
	return m.Size()
}
func (m *SplitterPacketTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitterPacketTracker.DiscardUnknown(m)
}

var xxx_messageInfo_SplitterPacketTracker proto.InternalMessageInfo

func (m *SplitterPacketTracker) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *SplitterPacketTracker) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SplitterPacketTracker) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SplitterPacketTracker) GetPacketHash() []byte {
	if m != nil {
		return m.PacketHash
	}
	return nil
}

type SplitterPacketWrapper struct {
	SourcePort    string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	SourceChannel string `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	DstPort       string `protobuf:"bytes,3,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	DstChannel    string `protobuf:"bytes,4,opt,name=dst_channel,json=dstChannel,proto3" json:"dst_channel,omitempty"`
	PacketData    []byte `protobuf:"bytes,5,opt,name=packet_data,json=packetData,proto3" json:"packet_data,omitempty"`
}

func (m *SplitterPacketWrapper) Reset()         { *m = SplitterPacketWrapper{} }
func (m *SplitterPacketWrapper) String() string { return proto.CompactTextString(m) }
func (*SplitterPacketWrapper) ProtoMessage()    {}
func (*SplitterPacketWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e62aae9241d7efc, []int{3}
}
func (m *SplitterPacketWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitterPacketWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitterPacketWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitterPacketWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitterPacketWrapper.Merge(m, src)
}
func (m *SplitterPacketWrapper) XXX_Size() int {
	return m.Size()
}
func (m *SplitterPacketWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitterPacketWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_SplitterPacketWrapper proto.InternalMessageInfo

func (m *SplitterPacketWrapper) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *SplitterPacketWrapper) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *SplitterPacketWrapper) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *SplitterPacketWrapper) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *SplitterPacketWrapper) GetPacketData() []byte {
	if m != nil {
		return m.PacketData
	}
	return nil
}

func init() {
	proto.RegisterType((*SplitterPacketData)(nil), "baton.splitter.SplitterPacketData")
	proto.RegisterType((*MultiPacket)(nil), "baton.splitter.MultiPacket")
	proto.RegisterType((*SplitterPacketTracker)(nil), "baton.splitter.SplitterPacketTracker")
	proto.RegisterType((*SplitterPacketWrapper)(nil), "baton.splitter.SplitterPacketWrapper")
}

func init() { proto.RegisterFile("baton/splitter/packet.proto", fileDescriptor_6e62aae9241d7efc) }

var fileDescriptor_6e62aae9241d7efc = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xdf, 0x4a, 0x02, 0x41,
	0x14, 0xc6, 0x9d, 0x34, 0xb3, 0x63, 0x7a, 0x31, 0x90, 0xac, 0x04, 0xab, 0x2c, 0x04, 0x5e, 0x69,
	0xd0, 0x0b, 0x44, 0x05, 0xd5, 0x45, 0x20, 0x16, 0x04, 0xdd, 0xc8, 0xe8, 0x0c, 0xec, 0x92, 0xed,
	0x0c, 0x33, 0x47, 0xa8, 0x9b, 0x9e, 0xa1, 0x07, 0xea, 0x01, 0xba, 0xf4, 0xb2, 0xcb, 0xd0, 0x17,
	0x89, 0xf9, 0x23, 0xee, 0x76, 0xb5, 0xf3, 0x9d, 0xf3, 0x9d, 0xef, 0xfc, 0x60, 0x0f, 0x9c, 0xcc,
	0x18, 0xca, 0x7c, 0x64, 0xd4, 0x22, 0x43, 0x14, 0x7a, 0xa4, 0xd8, 0xfc, 0x45, 0xe0, 0x50, 0x69,
	0x89, 0x92, 0xb6, 0x5d, 0x73, 0xb8, 0x6d, 0x26, 0x37, 0x40, 0x1f, 0xc2, 0x7b, 0xec, 0x7c, 0xd7,
	0x0c, 0x19, 0xed, 0x40, 0xdd, 0x88, 0x9c, 0x0b, 0x1d, 0x91, 0x3e, 0x19, 0x1c, 0x4e, 0x82, 0xa2,
	0x5d, 0x68, 0xcc, 0x53, 0x96, 0xe5, 0xd3, 0x8c, 0x47, 0x7b, 0xae, 0x73, 0xe0, 0xf4, 0x1d, 0x4f,
	0x2e, 0xa0, 0x79, 0xbf, 0x5c, 0x60, 0xe6, 0x53, 0x4a, 0x4e, 0x52, 0x72, 0xda, 0x70, 0x8f, 0xe4,
	0x22, 0x8e, 0x26, 0x41, 0x25, 0x1f, 0x70, 0x5c, 0x46, 0x79, 0xd4, 0xf6, 0xa3, 0x29, 0x85, 0x9a,
	0x92, 0x1a, 0x43, 0x8e, 0x7b, 0xd3, 0x08, 0x6c, 0x5e, 0x9e, 0x8b, 0x45, 0x01, 0xc4, 0x4a, 0x1b,
	0xcf, 0x5e, 0xe5, 0x32, 0xc7, 0xa8, 0xda, 0x27, 0x83, 0xd6, 0x24, 0x28, 0xda, 0x83, 0xa6, 0x5f,
	0x34, 0x4d, 0x99, 0x49, 0xa3, 0x9a, 0xdb, 0x0d, 0xbe, 0x74, 0xcb, 0x4c, 0x9a, 0x7c, 0x91, 0xff,
	0x00, 0x4f, 0x9a, 0x29, 0x25, 0xb4, 0x1d, 0x35, 0x72, 0xa9, 0xe7, 0x62, 0x5a, 0xe0, 0x00, 0x5f,
	0x1a, 0x5b, 0x9a, 0x53, 0x68, 0x07, 0x43, 0x19, 0xaa, 0xe5, 0xab, 0x57, 0x01, 0xad, 0x0b, 0x0d,
	0x6e, 0xd0, 0x87, 0x54, 0x3d, 0x35, 0x37, 0xe8, 0x12, 0x7a, 0xd0, 0xb4, 0xad, 0xed, 0x78, 0xcd,
	0xaf, 0xe0, 0x06, 0xb7, 0xb3, 0x3b, 0x7c, 0xce, 0x90, 0x45, 0xfb, 0x45, 0x7c, 0xfb, 0xcf, 0x2e,
	0xcf, 0xbe, 0xd7, 0x31, 0x59, 0xad, 0x63, 0xf2, 0xbb, 0x8e, 0xc9, 0xe7, 0x26, 0xae, 0xac, 0x36,
	0x71, 0xe5, 0x67, 0x13, 0x57, 0x9e, 0x3b, 0xfe, 0x20, 0xde, 0x76, 0x27, 0x81, 0xef, 0x4a, 0x98,
	0x59, 0xdd, 0x9d, 0xc4, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x39, 0xe4, 0x95, 0x31,
	0x02, 0x00, 0x00,
}

func (m *SplitterPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitterPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitterPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packet) > 0 {
		i -= len(m.Packet)
		copy(dAtA[i:], m.Packet)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Packet)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplitterPacketTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitterPacketTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitterPacketTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketHash) > 0 {
		i -= len(m.PacketHash)
		copy(dAtA[i:], m.PacketHash)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PacketHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplitterPacketWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitterPacketWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitterPacketWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketData) > 0 {
		i -= len(m.PacketData)
		copy(dAtA[i:], m.PacketData)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PacketData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DstChannel) > 0 {
		i -= len(m.DstChannel)
		copy(dAtA[i:], m.DstChannel)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DstChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DstPort) > 0 {
		i -= len(m.DstPort)
		copy(dAtA[i:], m.DstPort)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DstPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SplitterPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *MultiPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Packet)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *SplitterPacketTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPacket(uint64(m.Amount))
	}
	l = len(m.PacketHash)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *SplitterPacketWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DstPort)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DstChannel)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.PacketData)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SplitterPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitterPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitterPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet[:0], dAtA[iNdEx:postIndex]...)
			if m.Packet == nil {
				m.Packet = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitterPacketTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitterPacketTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitterPacketTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketHash = append(m.PacketHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PacketHash == nil {
				m.PacketHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitterPacketWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitterPacketWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitterPacketWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketData = append(m.PacketData[:0], dAtA[iNdEx:postIndex]...)
			if m.PacketData == nil {
				m.PacketData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
